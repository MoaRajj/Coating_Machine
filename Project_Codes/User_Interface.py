# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BuffCoating_V2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTime, QTimer
import serial, sys
import serial.tools.list_ports


class serialThreadClass_1(QtCore.QThread):  # Seri Porttan veri okuma işlemi için QThread Kullanıldı.

    message_1 = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):

        super(serialThreadClass_1, self).__init__(parent)
        self.serialPort_1 = serial.Serial()
        self.stopflag_1 = False

    def stop(self):
        self.stopflag_1 = True

    def run(self):
        while True:
            if self.stopflag_1:
                self.stopflag_1 = False
                break
            elif self.serialPort_1.isOpen():
                try:
                    self.data_1 = self.serialPort_1.readline()
                    print(type(self.data_1.decode()))

                except:
                    print("ERROR\n")
                self.message_1.emit(str(self.data_1.decode()))

class serialThreadClass_2(QtCore.QThread):  # Seri Porttan veri okuma işlemi için QThread Kullanıldı.

    message_2 = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):

        super(serialThreadClass_2, self).__init__(parent)
        self.serialPort_2 = serial.Serial()
        self.stopflag_2 = False

    def stop(self):
        self.stopflag_2 = True

    def run(self):
        while True:
            if self.stopflag_2:
                self.stopflag_2 = False
                break
            elif self.serialPort_2.isOpen():
                try:
                    self.data_2 = self.serialPort_2.readline()
                    print(type(self.data_2.decode()))

                except:
                    print("ERROR\n")
                self.message_2.emit(str(self.data_2.decode()))

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1075, 715)
        MainWindow.setMinimumSize(QtCore.QSize(1075, 715))
        MainWindow.setMaximumSize(QtCore.QSize(1075, 715))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.button_stop = QtWidgets.QPushButton(self.centralwidget)
        self.button_stop.setGeometry(QtCore.QRect(10, 482, 609, 28))
        self.button_stop.setObjectName("button_stop")

        self.label_function = QtWidgets.QLabel(self.centralwidget)
        self.label_function.setGeometry(QtCore.QRect(10, 327, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_function.setFont(font)
        self.label_function.setObjectName("label_function")

        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(634, 373, 431, 101))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.button_Left = QtWidgets.QPushButton(self.layoutWidget)
        self.button_Left.setObjectName("button_Left")
        self.gridLayout.addWidget(self.button_Left, 1, 0, 1, 1)

        self.button_Forward = QtWidgets.QPushButton(self.layoutWidget)
        self.button_Forward.setObjectName("button_Forward")
        self.gridLayout.addWidget(self.button_Forward, 0, 1, 1, 1)

        self.button_Right = QtWidgets.QPushButton(self.layoutWidget)
        self.button_Right.setObjectName("button_Right")
        self.gridLayout.addWidget(self.button_Right, 1, 2, 1, 1)

        self.button_polishing = QtWidgets.QPushButton(self.layoutWidget)
        self.button_polishing.setObjectName("button_polishing")
        self.gridLayout.addWidget(self.button_polishing, 1, 1, 1, 1)

        self.button_Backward = QtWidgets.QPushButton(self.layoutWidget)
        self.button_Backward.setObjectName("button_Backward")
        self.gridLayout.addWidget(self.button_Backward, 2, 1, 1, 1)

        self.button_Up = QtWidgets.QPushButton(self.layoutWidget)
        self.button_Up.setObjectName("button_Up")
        self.gridLayout.addWidget(self.button_Up, 0, 0, 1, 1)

        self.button_Down = QtWidgets.QPushButton(self.layoutWidget)
        self.button_Down.setObjectName("button_Down")
        self.gridLayout.addWidget(self.button_Down, 0, 2, 1, 1)

        self.Button_roller_left = QtWidgets.QPushButton(self.layoutWidget)
        self.Button_roller_left.setObjectName("Button_roller_left")
        self.gridLayout.addWidget(self.Button_roller_left, 2, 0, 1, 1)

        self.Button_roller_right = QtWidgets.QPushButton(self.layoutWidget)
        self.Button_roller_right.setObjectName("Button_roller_right")
        self.gridLayout.addWidget(self.Button_roller_right, 2, 2, 1, 1)

        self.button_function_3 = QtWidgets.QPushButton(self.centralwidget)
        self.button_function_3.setGeometry(QtCore.QRect(10, 446, 301, 28))
        self.button_function_3.setObjectName("button_function_3")

        self.label_motors_baudrate = QtWidgets.QLabel(self.centralwidget)
        self.label_motors_baudrate.setGeometry(QtCore.QRect(10, 170, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_motors_baudrate.setFont(font)
        self.label_motors_baudrate.setObjectName("label_motors_baudrate")

        self.label_motors_port = QtWidgets.QLabel(self.centralwidget)
        self.label_motors_port.setGeometry(QtCore.QRect(10, 120, 141, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_motors_port.setFont(font)
        self.label_motors_port.setObjectName("label_motors_port")

        self.textBrowser_communication = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_communication.setGeometry(QtCore.QRect(626, 141, 442, 151))
        self.textBrowser_communication.setObjectName("textBrowser_communication")

        self.label_sensor_data = QtWidgets.QLabel(self.centralwidget)
        self.label_sensor_data.setGeometry(QtCore.QRect(10, 527, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_sensor_data.setFont(font)
        self.label_sensor_data.setObjectName("label_sensor_data")

        self.comboBox_motors = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_motors.setGeometry(QtCore.QRect(10, 140, 271, 22))
        self.comboBox_motors.setObjectName("comboBox_motors")

        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(20, 10, 340, 63))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")

        self.button_function_1 = QtWidgets.QPushButton(self.centralwidget)
        self.button_function_1.setGeometry(QtCore.QRect(10, 375, 301, 28))
        self.button_function_1.setObjectName("button_function_1")

        self.button_function_6 = QtWidgets.QPushButton(self.centralwidget)
        self.button_function_6.setGeometry(QtCore.QRect(318, 446, 301, 28))
        self.button_function_6.setObjectName("button_function_6")

        self.comboBox_motors_baudrate = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_motors_baudrate.setGeometry(QtCore.QRect(10, 190, 271, 22))
        self.comboBox_motors_baudrate.setObjectName("comboBox_motors_baudrate")

        self.label_incoming_message = QtWidgets.QLabel(self.centralwidget)
        self.label_incoming_message.setGeometry(QtCore.QRect(630, 100, 121, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_incoming_message.setFont(font)
        self.label_incoming_message.setObjectName("label_incoming_message")

        self.label_motors_status_serial_port = QtWidgets.QLabel(self.centralwidget)
        self.label_motors_status_serial_port.setGeometry(QtCore.QRect(10, 290, 171, 28))
        self.label_motors_status_serial_port.setObjectName("label_motors_status_serial_port")

        self.label_motor_control = QtWidgets.QLabel(self.centralwidget)
        self.label_motor_control.setGeometry(QtCore.QRect(640, 322, 231, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_motor_control.setFont(font)
        self.label_motor_control.setObjectName("label_motor_control")

        self.button_motors_connect = QtWidgets.QPushButton(self.centralwidget)
        self.button_motors_connect.setGeometry(QtCore.QRect(10, 230, 271, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.button_motors_connect.setFont(font)
        self.button_motors_connect.setObjectName("button_motors_connect")

        self.button_motors_disconnect = QtWidgets.QPushButton(self.centralwidget)
        self.button_motors_disconnect.setGeometry(QtCore.QRect(10, 260, 271, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.button_motors_disconnect.setFont(font)
        self.button_motors_disconnect.setObjectName("button_motors_disconnect")

        self.label_serial_communication = QtWidgets.QLabel(self.centralwidget)
        self.label_serial_communication.setGeometry(QtCore.QRect(10, 82, 301, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_serial_communication.setFont(font)
        self.label_serial_communication.setObjectName("label_serial_communication")

        self.button_function_5 = QtWidgets.QPushButton(self.centralwidget)
        self.button_function_5.setGeometry(QtCore.QRect(318, 410, 301, 28))
        self.button_function_5.setObjectName("button_function_5")

        self.button_function_4 = QtWidgets.QPushButton(self.centralwidget)
        self.button_function_4.setGeometry(QtCore.QRect(318, 375, 301, 28))
        self.button_function_4.setObjectName("button_function_4")

        self.button_function_2 = QtWidgets.QPushButton(self.centralwidget)
        self.button_function_2.setGeometry(QtCore.QRect(10, 410, 301, 28))
        self.button_function_2.setObjectName("button_function_2")

        self.button_data_disconnect = QtWidgets.QPushButton(self.centralwidget)
        self.button_data_disconnect.setGeometry(QtCore.QRect(320, 260, 271, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.button_data_disconnect.setFont(font)
        self.button_data_disconnect.setObjectName("button_data_disconnect")

        self.label_data_baudrate = QtWidgets.QLabel(self.centralwidget)
        self.label_data_baudrate.setGeometry(QtCore.QRect(320, 170, 81, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_data_baudrate.setFont(font)
        self.label_data_baudrate.setObjectName("label_data_baudrate")

        self.button_data_connect = QtWidgets.QPushButton(self.centralwidget)
        self.button_data_connect.setGeometry(QtCore.QRect(320, 230, 271, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.button_data_connect.setFont(font)
        self.button_data_connect.setObjectName("button_data_connect")

        self.label_data_port = QtWidgets.QLabel(self.centralwidget)
        self.label_data_port.setGeometry(QtCore.QRect(320, 120, 241, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_data_port.setFont(font)
        self.label_data_port.setObjectName("label_data_port")

        self.comboBox_data = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_data.setGeometry(QtCore.QRect(320, 140, 271, 22))
        self.comboBox_data.setObjectName("comboBox_data")

        self.comboBox_data_baudrate = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_data_baudrate.setGeometry(QtCore.QRect(320, 190, 271, 22))
        self.comboBox_data_baudrate.setObjectName("comboBox_data_baudrate")

        self.label_data_status_serial_port = QtWidgets.QLabel(self.centralwidget)
        self.label_data_status_serial_port.setGeometry(QtCore.QRect(320, 290, 171, 28))
        self.label_data_status_serial_port.setObjectName("label_data_status_serial_port")

        self.doubleSpinBox_temperature = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_temperature.setEnabled(False)
        self.doubleSpinBox_temperature.setGeometry(QtCore.QRect(390, 578, 62, 22))
        self.doubleSpinBox_temperature.setMinimum(30)
        self.doubleSpinBox_temperature.setValue(40)
        self.doubleSpinBox_temperature.setObjectName("doubleSpinBox_temperature")

        self.doubleSpinBox_pressure = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_pressure.setEnabled(True)
        self.doubleSpinBox_pressure.setGeometry(QtCore.QRect(390, 630, 62, 22))
        self.doubleSpinBox_pressure.setValue(2)
        self.doubleSpinBox_pressure.setObjectName("doubleSpinBox_pressure")

        self.label_pressure = QtWidgets.QLabel(self.centralwidget)
        self.label_pressure.setEnabled(True)
        self.label_pressure.setGeometry(QtCore.QRect(10, 630, 71, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_pressure.setFont(font)
        self.label_pressure.setObjectName("label_pressure")

        self.label_temperature = QtWidgets.QLabel(self.centralwidget)
        self.label_temperature.setEnabled(True)
        self.label_temperature.setGeometry(QtCore.QRect(10, 580, 101, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_temperature.setFont(font)
        self.label_temperature.setObjectName("label_temperature")

        self.lcd_temperature = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcd_temperature.setEnabled(False)
        self.lcd_temperature.setGeometry(QtCore.QRect(130, 570, 101, 41))
        self.lcd_temperature.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.lcd_temperature.setFrameShadow(QtWidgets.QFrame.Raised)
        self.lcd_temperature.setSmallDecimalPoint(False)
        self.lcd_temperature.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcd_temperature.setObjectName("lcd_temperature")

        self.lcd_pressure = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcd_pressure.setEnabled(True)
        self.lcd_pressure.setGeometry(QtCore.QRect(130, 620, 101, 41))
        self.lcd_pressure.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.lcd_pressure.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcd_pressure.setObjectName("lcd_pressure")

        self.label_temperature_setpoint = QtWidgets.QLabel(self.centralwidget)
        self.label_temperature_setpoint.setGeometry(QtCore.QRect(250, 580, 131, 16))
        self.label_temperature_setpoint.setObjectName("label_temperature_setpoint")

        self.label_pressure_setpoint = QtWidgets.QLabel(self.centralwidget)
        self.label_pressure_setpoint.setGeometry(QtCore.QRect(250, 632, 111, 16))
        self.label_pressure_setpoint.setObjectName("label_pressure_setpoint")

        self.button_gohome = QtWidgets.QPushButton(self.centralwidget)
        self.button_gohome.setGeometry(QtCore.QRect(950, 490, 93, 28))
        self.button_gohome.setObjectName("button_gohome")

        self.checkBox_heater = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_heater.setGeometry(QtCore.QRect(480, 580, 141, 20))
        self.checkBox_heater.setObjectName("checkBox_heater")

        self.button_program_start = QtWidgets.QPushButton(self.centralwidget)
        self.button_program_start.setGeometry(QtCore.QRect(720, 580, 93, 28))
        self.button_program_start.setObjectName("button_program_start")

        self.button_program_stop = QtWidgets.QPushButton(self.centralwidget)
        self.button_program_stop.setGeometry(QtCore.QRect(830, 580, 93, 28))
        self.button_program_stop.setObjectName("button_program_stop")

        self.label_program = QtWidgets.QLabel(self.centralwidget)
        self.label_program.setGeometry(QtCore.QRect(720, 620, 201, 20))
        self.label_program.setAlignment(QtCore.Qt.AlignCenter)
        self.label_program.setObjectName("label_program")

        self.button_reset_pressure = QtWidgets.QPushButton(self.centralwidget)
        self.button_reset_pressure.setGeometry(QtCore.QRect(490, 625, 101, 31))
        self.button_reset_pressure.setObjectName("button_reset_pressure")

        self.spinBox_period = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_period.setGeometry(QtCore.QRect(770, 490, 51, 21))
        self.spinBox_period.setMinimum(1)
        self.spinBox_period.setValue(5)
        self.spinBox_period.setObjectName("spinBox_period")

        self.label_period = QtWidgets.QLabel(self.centralwidget)
        self.label_period.setGeometry(QtCore.QRect(650, 490, 111, 21))
        self.label_period.setObjectName("label_period")

        self.label_speed = QtWidgets.QLabel(self.centralwidget)
        self.label_speed.setGeometry(QtCore.QRect(650, 530, 101, 16))
        self.label_speed.setObjectName("label_speed")

        self.spinBox_speed = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_speed.setGeometry(QtCore.QRect(760, 530, 61, 22))
        self.spinBox_speed.setMinimum(700)
        self.spinBox_speed.setMaximum(99999)
        self.spinBox_speed.setValue(800)
        self.spinBox_speed.setObjectName("spinBox_speed")

        self.label_comment = QtWidgets.QLabel(self.centralwidget)
        self.label_comment.setGeometry(QtCore.QRect(830, 530, 121, 16))
        self.label_comment.setObjectName("label_comment")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1075, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.checkBox_heater.toggled['bool'].connect(self.doubleSpinBox_temperature.setEnabled) # type: ignore
        self.checkBox_heater.toggled['bool'].connect(self.lcd_temperature.setEnabled) # type: ignore
        self.heater_checkbox = False
        self.checkBox_heater.toggled.connect(self.Check_Heater)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # comboBox ->> ports
        self.ports = serial.tools.list_ports.comports()
        for i in self.ports:
            if i.serial_number == "7583435323035181A1D1":
                self.comboBox_motors.addItem(str(i))
            else:
                self.comboBox_data.addItem(str(i))

        # comboBox ->> baud rates
        baud = ["300", "1200", "2400", "4800", "9600", "19200", "38400", "57600", "74880", "115200", "230400",
                "250000",
                "500000", "1000000", "2000000"]
        for i in baud:
            self.comboBox_motors_baudrate.addItem(i)
            self.comboBox_data_baudrate.addItem(i)
        self.comboBox_motors_baudrate.setCurrentText(baud[4])
        self.comboBox_data_baudrate.setCurrentText(baud[4])

        # Ports states
        self.label_motors_status_serial_port.setText("<font color=red>COM port is not connected.</font>")
        self.label_data_status_serial_port.setText("<font color=red>COM port is not connected.</font>")

        self.mySerial_1 = serialThreadClass_1()
        self.button_motors_connect.clicked.connect(self.serialConnect_1)
        self.button_motors_disconnect.clicked.connect(self.serialDisconnect_1)

        self.mySerial_2 = serialThreadClass_2()
        self.button_data_connect.clicked.connect(self.serialConnect_2)
        self.button_data_disconnect.clicked.connect(self.serialDisconnect_2)

        self.button_motors_disconnect.setEnabled(False)
        self.button_data_disconnect.setEnabled(False)

        self.button_function_1.setEnabled(False)
        self.button_function_2.setEnabled(False)
        self.button_function_3.setEnabled(False)
        self.button_function_4.setEnabled(False)
        self.button_function_5.setEnabled(False)
        self.button_function_6.setEnabled(False)
        self.button_stop.setEnabled(False)

        self.button_Up.setEnabled(False)
        self.button_Forward.setEnabled(False)
        self.button_Down.setEnabled(False)
        self.button_Left.setEnabled(False)
        self.button_polishing.setEnabled(False)
        self.button_Right.setEnabled(False)
        self.button_Backward.setEnabled(False)
        self.Button_roller_left.setEnabled(False)
        self.Button_roller_right.setEnabled(False)
        self.button_gohome.setEnabled(False)
        self.button_reset_pressure.setEnabled(False)

        self.button_function_1.clicked.connect(lambda: self.button_functions(self.button_function_1))
        self.button_function_2.clicked.connect(lambda: self.button_functions(self.button_function_2))
        self.button_function_3.clicked.connect(lambda: self.button_functions(self.button_function_3))
        self.button_function_4.clicked.connect(lambda: self.button_functions(self.button_function_4))
        self.button_function_5.clicked.connect(lambda: self.button_functions(self.button_function_5))
        self.button_function_6.clicked.connect(lambda: self.button_functions(self.button_function_6))
        self.button_stop.clicked.connect(lambda: self.button_functions(self.button_stop))

        self.button_Up.pressed.connect(lambda: self.button_functions(self.button_Up))
        self.button_Up.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_Forward.pressed.connect(lambda: self.button_functions(self.button_Forward))
        self.button_Forward.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_Down.pressed.connect(lambda: self.button_functions(self.button_Down))
        self.button_Down.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_Left.pressed.connect(lambda: self.button_functions(self.button_Left))
        self.button_Left.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_Right.pressed.connect(lambda: self.button_functions(self.button_Right))
        self.button_Right.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_Backward.pressed.connect(lambda: self.button_functions(self.button_Backward))
        self.button_Backward.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_polishing.pressed.connect(lambda: self.button_functions(self.button_polishing))
        self.button_polishing.released.connect(lambda: self.button_functions(self.button_stop))
        self.Button_roller_left.pressed.connect(lambda: self.button_functions(self.Button_roller_left))
        self.Button_roller_left.released.connect(lambda: self.button_functions(self.button_stop))
        self.Button_roller_right.pressed.connect(lambda: self.button_functions(self.Button_roller_right))
        self.Button_roller_right.released.connect(lambda: self.button_functions(self.button_stop))
        self.button_gohome.clicked.connect(lambda: self.button_functions(self.button_gohome))

        self.button_program_start.clicked.connect(lambda: self.On_Off(self.button_program_start))
        self.button_program_stop.clicked.connect(lambda: self.On_Off(self.button_program_stop))

        # On Off
        self.Port_1 = False
        self.Port_2 = False
        self.button_program_start.setEnabled(False)
        self.button_program_stop.setEnabled(False)

    def serialConnect_1(self):
        if self.comboBox_motors.currentText() != '':
            self.portText_1 = self.comboBox_motors.currentText()
            self.port_1 = self.portText_1.split()
            self.baudrate_1 = self.comboBox_motors_baudrate.currentText()
            self.mySerial_1.serialPort_1.baudrate = int(self.baudrate_1)
            self.mySerial_1.serialPort_1.port = self.port_1[0]

        try:
            self.mySerial_1.serialPort_1.open()

        except:
            self.label_motors_status_serial_port.setText("<font color=red>Select a port.</font>")

        if self.mySerial_1.serialPort_1.isOpen():
            self.label_motors_status_serial_port.setText('<font color=green>Connected</font>')
            self.Port_1 = True
            self.button_motors_connect.setEnabled(False)
            self.comboBox_motors.setEnabled(False)
            self.comboBox_motors_baudrate.setEnabled(False)
            self.button_motors_disconnect.setEnabled(True)
            if self.Port_1 == True and self.Port_2 == True:
                self.button_program_start.setEnabled(True)
                self.button_program_stop.setEnabled(True)
            elif self.Port_1 == False or self.Port_2 == False:
                self.button_program_start.setEnabled(False)
                self.button_program_stop.setEnabled(False)

    def serialDisconnect_1(self):
        if self.mySerial_1.serialPort_1.isOpen():
            self.mySerial_1.serialPort_1.close()
            if self.mySerial_1.serialPort_1.isOpen() == False:
                self.label_motors_status_serial_port.setText('<font color=red>Disconnected</font>')
                self.Port_1 = False
                self.button_motors_connect.setEnabled(True)
                self.comboBox_motors.setEnabled(True)
                self.comboBox_motors_baudrate.setEnabled(True)
                # self.button_program_start.setEnabled(False)
                # self.button_program_stop.setEnabled(False)
                self.button_motors_disconnect.setEnabled(False)
                if self.Port_1 == True and self.Port_2 == True:
                    self.button_program_start.setEnabled(True)
                    self.button_program_stop.setEnabled(True)
                elif self.Port_1 == False or self.Port_2 == False:
                    self.button_program_start.setEnabled(False)
                    self.button_program_stop.setEnabled(False)

    def serialConnect_2(self):
        if self.comboBox_data.currentText() != '':
            self.portText_2 = self.comboBox_data.currentText()
            self.port_2 = self.portText_2.split()
            self.baudrate_2 = self.comboBox_data_baudrate.currentText()
            self.mySerial_2.serialPort_2.baudrate = int(self.baudrate_2)
            self.mySerial_2.serialPort_2.port = self.port_2[0]

        try:
            self.mySerial_2.serialPort_2.open()

        except:
            self.label_data_status_serial_port.setText("<font color=red>Select a port.</font>")

        if self.mySerial_2.serialPort_2.isOpen():
            self.label_data_status_serial_port.setText('<font color=green>Connected</font>')
            self.Port_2 = True
            self.button_data_connect.setEnabled(False)
            self.comboBox_data.setEnabled(False)
            self.comboBox_data_baudrate.setEnabled(False)
            self.button_data_disconnect.setEnabled(True)
            if self.Port_1 == True and self.Port_2 == True:
                self.button_program_start.setEnabled(True)
                self.button_program_stop.setEnabled(True)
            elif self.Port_1 == False or self.Port_2 == False:
                self.button_program_start.setEnabled(False)
                self.button_program_stop.setEnabled(False)

    def serialDisconnect_2(self):
        if self.mySerial_2.serialPort_2.isOpen():
            self.mySerial_2.serialPort_2.close()
            if self.mySerial_2.serialPort_2.isOpen() == False:
                self.label_data_status_serial_port.setText('<font color=red>Disconnected</font>')
                self.Port_2 = False
                self.button_data_connect.setEnabled(True)
                self.comboBox_data.setEnabled(True)
                self.comboBox_data_baudrate.setEnabled(True)
                # self.button_program_start.setEnabled(False)
                # self.button_program_stop.setEnabled(False)
                self.button_data_disconnect.setEnabled(False)
                if self.Port_1 == True and self.Port_2 == True:
                    self.button_program_start.setEnabled(True)
                    self.button_program_stop.setEnabled(True)
                elif self.Port_1 == False or self.Port_2 == False:
                    self.button_program_start.setEnabled(False)
                    self.button_program_stop.setEnabled(False)

    def On_Off(self, button):
        if button == self.button_program_start:
            if self.mySerial_1.serialPort_1.isOpen() and self.mySerial_2.serialPort_2.isOpen():
                if self.heater_checkbox:
                    self.doubleSpinBox_temperature.setEnabled(False)
                    temperature_set_point = str(self.doubleSpinBox_temperature.value())
                    self.mySerial_2.serialPort_2.write(temperature_set_point.encode())
                    time.sleep(2)
                    self.mySerial_2.serialPort_2.write("b\n".encode())
                    self.mySerial_2.message_2.connect(self.Pressure_and_Temperature)
                    self.mySerial_2.start()
                else:
                    self.mySerial_2.serialPort_2.write("o\n".encode())
                    self.label_program.setText("<font color=green>The program is On.</font>")
                    # self.mySerial_2.serialPort_2.write(self.doubleSpinBox_pressure.value().encode())
                    self.mySerial_2.message_2.connect(self.Pressure)
                    self.mySerial_2.start()

                self.button_motors_disconnect.setEnabled(False)
                self.button_data_disconnect.setEnabled(False)

                self.button_function_1.setEnabled(True)
                self.button_function_2.setEnabled(True)
                self.button_function_3.setEnabled(True)
                self.button_function_4.setEnabled(True)
                self.button_function_5.setEnabled(True)
                self.button_function_6.setEnabled(True)
                self.button_stop.setEnabled(True)

                self.button_Up.setEnabled(True)
                self.button_Forward.setEnabled(True)
                self.button_Down.setEnabled(True)
                self.button_Left.setEnabled(True)
                self.button_Right.setEnabled(True)
                self.button_Backward.setEnabled(True)
                self.button_polishing.setEnabled(True)
                self.Button_roller_left.setEnabled(True)
                self.Button_roller_right.setEnabled(True)
                self.button_gohome.setEnabled(True)

                self.checkBox_heater.setEnabled(False)
                self.doubleSpinBox_pressure.setEnabled(False)
                self.button_reset_pressure.setEnabled(True)

                self.message_1 = self.textBrowser_communication
                self.mySerial_1.message_1.connect(self.Motors_Message)
                self.mySerial_1.start()

                self.button_reset_pressure.clicked.connect(lambda: self.button_functions(self.button_reset_pressure))

        elif button == self.button_program_stop:
            if self.mySerial_1.serialPort_1.isOpen() and self.mySerial_2.serialPort_2.isOpen():
                self.mySerial_1.serialPort_1.write("s".encode())
                self.mySerial_2.serialPort_2.write("s\n".encode())
                self.label_program.setText("<font color=red>The program is Off.</font>")

                self.button_motors_disconnect.setEnabled(True)
                self.button_data_disconnect.setEnabled(True)

                self.button_function_1.setEnabled(False)
                self.button_function_2.setEnabled(False)
                self.button_function_3.setEnabled(False)
                self.button_function_4.setEnabled(False)
                self.button_function_5.setEnabled(False)
                self.button_function_6.setEnabled(False)
                self.button_stop.setEnabled(False)

                self.button_Up.setEnabled(False)
                self.button_Forward.setEnabled(False)
                self.button_Down.setEnabled(False)
                self.button_Left.setEnabled(False)
                self.button_Right.setEnabled(False)
                self.button_Backward.setEnabled(False)
                self.button_polishing.setEnabled(False)
                self.Button_roller_left.setEnabled(False)
                self.Button_roller_right.setEnabled(False)
                self.button_gohome.setEnabled(False)

                self.checkBox_heater.setEnabled(True)
                self.doubleSpinBox_pressure.setEnabled(True)
                self.button_reset_pressure.setEnabled(False)

                if self.heater_checkbox:
                    self.doubleSpinBox_temperature.setEnabled(True)

    def button_functions(self, button):
        if button == self.button_function_1:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                Polishing_Period = str(self.spinBox_period.value())
                self.mySerial_1.serialPort_1.write(("<1, " + Polishing_Speed + ", " + Polishing_Period + ">").encode())

        elif button == self.button_function_2:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                Polishing_Period = str(self.spinBox_period.value())
                self.mySerial_1.serialPort_1.write(("<2, " + Polishing_Speed + ", " + Polishing_Period + ">").encode())

        elif button == self.button_function_3:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                Polishing_Period = str(self.spinBox_period.value())
                self.mySerial_1.serialPort_1.write(("<3, " + Polishing_Speed + ", " + Polishing_Period + ">").encode())

        elif button == self.button_function_4:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                Polishing_Period = str(self.spinBox_period.value())
                self.mySerial_1.serialPort_1.write(("<4, " + Polishing_Speed + ", " + Polishing_Period + ">").encode())

        elif button == self.button_function_5:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                Polishing_Period = str(self.spinBox_period.value())
                self.mySerial_1.serialPort_1.write(("<5, " + Polishing_Speed + ", " + Polishing_Period + ">").encode())

        elif button == self.button_function_6:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                Polishing_Period = str(self.spinBox_period.value())
                self.mySerial_1.serialPort_1.write(("<6, " + Polishing_Speed + ", " + Polishing_Period + ">").encode())

        elif button == self.button_stop:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("s".encode())

        elif button == self.button_Right:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<k>".encode())

        elif button == self.button_Left:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<j>".encode())

        elif button == self.button_Forward:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<l>".encode())

        elif button == self.button_Backward:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<m>".encode())

        elif button == self.button_Up:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<n>".encode())

        elif button == self.button_Down:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<0>".encode())

        elif button == self.button_polishing:
            if self.mySerial_1.serialPort_1.isOpen():
                Polishing_Speed = str(self.spinBox_speed.value())
                self.mySerial_1.serialPort_1.write(("<a, " + Polishing_Speed + ">").encode())

        elif button == self.Button_roller_left:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<b>".encode())

        elif button == self.Button_roller_right:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<c>".encode())

        elif button == self.button_gohome:
            if self.mySerial_1.serialPort_1.isOpen():
                self.mySerial_1.serialPort_1.write("<7>".encode())

        elif button == self.button_reset_pressure:
            if self.mySerial_2.serialPort_2.isOpen():
                self.mySerial_2.serialPort_2.write("c\n".encode())

    def Check_Heater(self):
        if self.checkBox_heater.isChecked() == True:
            self.heater_checkbox = True
        else:
            self.heater_checkbox = False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Coating Machine"))
        self.button_stop.setText(_translate("MainWindow", "STOP"))
        self.label_function.setText(_translate("MainWindow", "Functions"))
        self.button_Left.setText(_translate("MainWindow", "Left"))
        self.button_Forward.setText(_translate("MainWindow", "Forward"))
        self.button_Right.setText(_translate("MainWindow", "Right"))
        self.button_polishing.setText(_translate("MainWindow", "Polishing"))
        self.button_Backward.setText(_translate("MainWindow", "Backward"))
        self.button_Up.setText(_translate("MainWindow", "Up"))
        self.button_Down.setText(_translate("MainWindow", "Down"))
        self.Button_roller_left.setText(_translate("MainWindow", "Roller Left"))
        self.Button_roller_right.setText(_translate("MainWindow", "Roller Right"))
        self.button_function_3.setText(_translate("MainWindow", "Pressure Test"))
        self.label_motors_baudrate.setText(_translate("MainWindow", "BAUD RATE"))
        self.label_motors_port.setText(_translate("MainWindow", "Motors Port"))
        self.label_sensor_data.setText(_translate("MainWindow", "Sensors Data"))
        self.label_title.setText(_translate("MainWindow", "Coating Machine"))
        self.button_function_1.setText(_translate("MainWindow", "Full Function from Zero Point"))
        self.button_function_6.setText(_translate("MainWindow", "Empty"))
        self.label_incoming_message.setText(_translate("MainWindow", "Incoming Message"))
        # self.label_motors_status_serial_port.setText(_translate("MainWindow", "Serial Port Status"))
        self.label_motor_control.setText(_translate("MainWindow", "Motors Control"))
        self.button_motors_connect.setText(_translate("MainWindow", "Connect"))
        self.button_motors_disconnect.setText(_translate("MainWindow", "Disconnect"))
        self.label_serial_communication.setText(_translate("MainWindow", "Serial Ports Connection"))
        self.button_function_5.setText(_translate("MainWindow", "Empty"))
        self.button_function_4.setText(_translate("MainWindow", "Stop at Targeted Pressure"))
        self.button_function_2.setText(_translate("MainWindow", "Pointed Polishing"))
        self.button_data_disconnect.setText(_translate("MainWindow", "Disconnect"))
        self.label_data_baudrate.setText(_translate("MainWindow", "BAUD RATE"))
        self.button_data_connect.setText(_translate("MainWindow", "Connect"))
        self.label_data_port.setText(_translate("MainWindow", "Pressure and Heating Port"))
        # self.label_data_status_serial_port.setText(_translate("MainWindow", "Serial Port Status"))
        self.label_pressure.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Pressure</span></p></body></html>"))
        self.label_temperature.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Temperature</span></p></body></html>"))
        self.label_temperature_setpoint.setText(_translate("MainWindow", "Temperature Set Point"))
        self.label_pressure_setpoint.setText(_translate("MainWindow", "Pressure Set Point"))
        self.button_gohome.setText(_translate("MainWindow", "Go Home"))
        self.checkBox_heater.setText(_translate("MainWindow", "Heating is required"))
        self.button_program_start.setText(_translate("MainWindow", "Start"))
        self.button_program_stop.setText(_translate("MainWindow", "Stop"))
        # self.label_program.setText(_translate("MainWindow", "The program is OFF"))
        self.button_reset_pressure.setText(_translate("MainWindow", "Reset pressure"))
        self.label_period.setText(_translate("MainWindow", "Polishing Period (s)"))
        self.label_speed.setText(_translate("MainWindow", "Polishing Speed"))
        self.label_comment.setText(_translate("MainWindow", "Minimum value 700"))

    def Motors_Message(self):
        self.incoming_message_1 = str(self.mySerial_1.data_1.decode())
        self.textBrowser_communication.append(self.incoming_message_1)

    def Pressure(self):
        self.incoming_message_2 = str(self.mySerial_2.data_2.decode())
        data_2 = self.incoming_message_2.strip()
        self.lcd_pressure.display(data_2)
        pressure_set_point = str(self.doubleSpinBox_pressure.value())
        if data_2 >= pressure_set_point:
            self.mySerial_1.serialPort_1.write("x".encode())

    def Pressure_and_Temperature(self):
        self.incoming_message_2 = str(self.mySerial_2.data_2.decode())
        data_2 = self.incoming_message_2.strip()
        data_2 = data_2.split(",")
        pressure_set_point = str(self.doubleSpinBox_pressure.value())
        if type(data_2) == list:
            if len(data_2) == 2:
                first_data = data_2[0]
                second_data = data_2[1]
                self.lcd_temperature.display(first_data)
                self.lcd_pressure.display(second_data)
                if second_data >= pressure_set_point:
                    self.mySerial_1.serialPort_1.write("x".encode())


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
